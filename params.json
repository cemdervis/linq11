{
  "name": "Linq11",
  "tagline": "LINQ for C++11",
  "body": "# linq11 - LINQ for C++11\r\n\r\nhttp://cemdervis.github.io/linq11/\r\n\r\nlinq11 is a header-only LINQ library for C++11 with minimal dependencies.\r\nIt neatly integrates into the STL and takes advantage of C++11 features, mainly the range-based for loop and lambda functions.\r\n\r\n_Example_:\r\n```cpp\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include \"linq.h\"\r\n\r\nusing namespace std;\r\n\r\nstruct Person\r\n{\r\n    string Name;\r\n    int Age;\r\n};\r\n\r\nint main()\r\n{\r\n    vector<Person> people = {\r\n        { \"P1\", 20 },\r\n        { \"P2\", 21 },\r\n        { \"P3\", 22 }\r\n    };\r\n\r\n    auto query = linq::from(&people)\r\n        .where([](const Person& p) { return p.Age > 20; });\r\n\r\n    for (const auto& p : query)\r\n        cout << p.Name << \", \" << p.Age << endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n_Output_:\r\n```\r\nP2, 21\r\nP3, 22\r\n```\r\n\r\nlinq11...\r\n- resolves all type related functionality at compile-time; no virtual dispatch is used\r\n- uses lazy evaluation, so your queries still work even after you modify the container it's based on\r\n- is extremely efficient in the way it works with your data; it avoids making copies and passes by reference wherever it can\r\n- does not maintain a flat list of operators in your query, but rather generates a linked-list at compile time\r\n- does not use exceptions\r\n- does not use boost or any other library\r\n- works with everything that behaves like an STL container. So vector, maps, strings, ...\r\n- tries to notify the user of errors at compile-time whenever it can (`static_assert`)\r\n- is licensed under the MIT license\r\n- uses the beloved dot operator!\r\n\r\n\r\n# Supported LINQ Operators\r\n\r\n- [Aggregate Operators](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators)\r\n  - _[Aggregate](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#aggregate)_\r\n  - _[Average](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#average)_\r\n  - _[Count](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#count)_\r\n  - _[Max](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#max)_, _[Min](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#min)_\r\n  - _[Sum](https://github.com/cemdervis/linq11/wiki/Aggregate-Operators#sum)_\r\n\r\n- [Concatenation Operators](https://github.com/cemdervis/linq11/wiki/Concatenation-Operators)\r\n  - _[Append](https://github.com/cemdervis/linq11/wiki/Concatenation-Operators#append)_\r\n\r\n- [Element Operators](https://github.com/cemdervis/linq11/wiki/Element-Operators)\r\n  - _[Element At](https://github.com/cemdervis/linq11/wiki/Element-Operators#element-at)_\r\n  - _[First](https://github.com/cemdervis/linq11/wiki/Element-Operators#first)_, _[Last](https://github.com/cemdervis/linq11/wiki/Element-Operators#last)_\r\n\r\n- [Filter Operators](https://github.com/cemdervis/linq11/wiki/Filter-Operators)\r\n  - _[Where](https://github.com/cemdervis/linq11/wiki/Filter-Operators#where)_\r\n\r\n- [Generation Operators](https://github.com/cemdervis/linq11/wiki/Generation-Operators)\r\n  - _[From To](https://github.com/cemdervis/linq11/wiki/Generation-Operators#from-to)_\r\n  - _[Repeat](https://github.com/cemdervis/linq11/wiki/Generation-Operators#repeat)_\r\n  - _[Generate](https://github.com/cemdervis/linq11/wiki/Generation-Operators#generate)_\r\n\r\n- [Join Operators](https://github.com/cemdervis/linq11/wiki/Join-Operators)\r\n  - _[Join](https://github.com/cemdervis/linq11/wiki/Join-Operators)_\r\n\r\n- [Partition Operators](https://github.com/cemdervis/linq11/wiki/Partition-Operators)\r\n  - _[Skip](https://github.com/cemdervis/linq11/wiki/Partition-Operators#skip)_, _[Skip While](https://github.com/cemdervis/linq11/wiki/Partition-Operators#skip-while)_\r\n  - _[Take](https://github.com/cemdervis/linq11/wiki/Partition-Operators#take)_, _[Take While](https://github.com/cemdervis/linq11/wiki/Partition-Operators#take-while)_\r\n\r\n- [Projection Operators](https://github.com/cemdervis/linq11/wiki/Projection-Operators)\r\n  - _[Select](https://github.com/cemdervis/linq11/wiki/Projection-Operators#select)_\r\n  - _[Select Many](https://github.com/cemdervis/linq11/wiki/Projection-Operators#select-many)_\r\n\r\n- [Quantifier Operators](https://github.com/cemdervis/linq11/wiki/Quantifier-Operators)\r\n  - _[All](https://github.com/cemdervis/linq11/wiki/Quantifier-Operators#all)_\r\n  - _[Any](https://github.com/cemdervis/linq11/wiki/Quantifier-Operators#any)_\r\n\r\n- [Set Operators](https://github.com/cemdervis/linq11/wiki/Set-Operators)\r\n  - _[Distinct](https://github.com/cemdervis/linq11/wiki/Set-Operators#distinct)_\r\n\r\n- [Sorting Operators](https://github.com/cemdervis/linq11/wiki/Sorting-Operators)\r\n  - _[Order By](https://github.com/cemdervis/linq11/wiki/Sorting-Operators#order-by)_\r\n  - _[Then By](https://github.com/cemdervis/linq11/wiki/Sorting-Operators#then-by)_\r\n  - _[Reverse](https://github.com/cemdervis/linq11/wiki/Sorting-Operators#reverse)_\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}